/*
Deployment script for HotelAppDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HotelAppDB"
:setvar DefaultFilePrefix "HotelAppDB"
:setvar DefaultDataPath "C:\Users\Kevin\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\mssqllocaldb\"
:setvar DefaultLogPath "C:\Users\Kevin\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\mssqllocaldb\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping Default Constraint unnamed constraint on [dbo].[Bookings]...';


GO
ALTER TABLE [dbo].[Bookings] DROP CONSTRAINT [DF__Bookings__Checke__2A4B4B5E];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_Bookings_Rooms]...';


GO
ALTER TABLE [dbo].[Bookings] DROP CONSTRAINT [FK_Bookings_Rooms];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_Bookings_Guests]...';


GO
ALTER TABLE [dbo].[Bookings] DROP CONSTRAINT [FK_Bookings_Guests];


GO
PRINT N'Starting rebuilding table [dbo].[Bookings]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Bookings] (
    [Id]        INT   IDENTITY (1, 1) NOT NULL,
    [RoomId]    INT   NOT NULL,
    [GuestId]   INT   NOT NULL,
    [StartDate] DATE  NOT NULL,
    [EndDate]   DATE  NOT NULL,
    [CheckedIn] BIT   DEFAULT 0 NOT NULL,
    [TotalCost] MONEY NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Bookings])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Bookings] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Bookings] ([Id], [StartDate], [EndDate], [CheckedIn], [TotalCost], [RoomId], [GuestId])
        SELECT   [Id],
                 [StartDate],
                 [EndDate],
                 [CheckedIn],
                 [TotalCost],
                 [RoomId],
                 [GuestId]
        FROM     [dbo].[Bookings]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Bookings] OFF;
    END

DROP TABLE [dbo].[Bookings];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Bookings]', N'Bookings';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Foreign Key [dbo].[FK_Bookings_Rooms]...';


GO
ALTER TABLE [dbo].[Bookings] WITH NOCHECK
    ADD CONSTRAINT [FK_Bookings_Rooms] FOREIGN KEY ([RoomId]) REFERENCES [dbo].[Rooms] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Bookings_Guests]...';


GO
ALTER TABLE [dbo].[Bookings] WITH NOCHECK
    ADD CONSTRAINT [FK_Bookings_Guests] FOREIGN KEY ([GuestId]) REFERENCES [dbo].[Guests] ([Id]);


GO
PRINT N'Creating Procedure [dbo].[spBookings_Insert]...';


GO
CREATE PROCEDURE [dbo].[spBookings_Insert]
	@roomId int,
	@guestId int,
	@startDate date,
	@endDate date,
	@totalCost money
AS

BEGIN
	SET NOCOUNT ON;

	INSERT INTO dbo.Bookings(RoomId, GuestId, StartDate, EndDate, TotalCost)
	VALUES (@roomId, @guestId, @startDate, @endDate, @totalCost);
END
GO
PRINT N'Creating Procedure [dbo].[spGuests_Insert]...';


GO
CREATE PROCEDURE [dbo].[spGuests_Insert]
	@firstName nvarchar(50),
	@lastName nvarchar(50)
AS

BEGIN
	SET NOCOUNT ON;

	IF NOT EXISTS (SELECT 1 FROM dbo.Guests WHERE FirstName = @firstName AND LastName = @lastName)
	BEGIN
		INSERT INTO dbo.Guests (FirstName, LastName)
			VALUES (@firstName, @lastName);
	END

	SELECT TOP 1  [Id], [FirstName], [LastName]
	FROM dbo.Guests
	WHERE FirstName = @firstName AND LastName = @lastName;
END
GO
PRINT N'Creating Procedure [dbo].[spRooms_GetAvailableRooms]...';


GO
CREATE PROCEDURE [dbo].[spRooms_GetAvailableRooms]
	@startDate date,
	@endDate date,
	@roomTypeId int
AS

BEGIN
	SET NOCOUNT ON;

	SELECT r.*
	FROM dbo.Rooms r
	INNER JOIN dbo.RoomTypes t
		ON t.Id = r.RoomTypeId
	WHERE r.RoomTypeId = @roomTypeId 
		AND r.Id NOT IN 
		(
			SELECT b.RoomId
			FROM dbo.Bookings b
			WHERE (@startDate < b.StartDate AND @endDate > b.EndDate)
				OR (b.StartDate <= @endDate AND @endDate < b.EndDate)
				OR (b.StartDate <= @startDate AND @startDate < b.EndDate)
		);
END
GO
PRINT N'Refreshing Procedure [dbo].[spRoomTypes_GetAvailableTypes]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spRoomTypes_GetAvailableTypes]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF NOT EXISTS (SELECT 1 FROM dbo.RoomTypes)
BEGIN
    INSERT INTO dbo.RoomTypes(Title, Description, Price)
    VALUES ('King Size Bed', 'A room with a king-size bed and a window', 100),
    ('Two Queen Size Bed', 'A room with two queen-size beds and a window', 115),
    ('Executive Suite', 'Two rooms, each with a king-size bed and a window', 205);
END

IF NOT EXISTS (SELECT 1 FROM dbo.Rooms)
BEGIN
    DECLARE @roomId1 int;
    DECLARE @roomId2 int;
    DECLARE @roomId3 int;

    SELECT @roomId1 = Id FROM dbo.RoomTypes WHERE Title = 'King Size Bed';
    SELECT @roomId2 = Id FROM dbo.RoomTypes WHERE Title = 'Two Queen Size Bed';
    SELECT @roomId3 = Id FROM dbo.RoomTypes WHERE Title = 'Executive Suite';

    INSERT INTO dbo.Rooms(RoomNumber, RoomTypeId)
    VALUES ('101', @roomId1),
    ('102', @roomId1),
    ('103', @roomId1),
    ('201', @roomId2),
    ('202', @roomId2),
    ('301', @roomId3);
END
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Bookings] WITH CHECK CHECK CONSTRAINT [FK_Bookings_Rooms];

ALTER TABLE [dbo].[Bookings] WITH CHECK CHECK CONSTRAINT [FK_Bookings_Guests];


GO
PRINT N'Update complete.';


GO
